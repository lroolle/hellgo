#+TITLE: Go Concurrency Patterns Advanced
#+DATE: 2020-08-16

#+EXPORT_FILE_NAME: go-concurrency-patterns-advanced
#+HUGO_WEIGHT: auto
#+HUGO_BASE_DIR: ~/G/blog
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_SECTION: notes
#+HUGO_CATEGORIES: notes
#+HUGO_TAGS: ...

* Go Concurrency Patterns Advanced

#+begin_quote
At Google I/O a year ago Rob Pike presented Go Concurrency Patterns, an
introduction to Go's concurrency model. Last week, at I/O 2013, Go team member
Sameer Ajmani continued the story with Advanced Go Concurrency Patterns, an
in-depth look at a real concurrent programming problem. The talk shows how to
detect and avoid deadlocks and race conditions, and demonstrates the
implementation of deadlines, cancellation, and more. For those who want to take
their Go programming to the next level, this is a must-see.
#+end_quote

#+begin_quote
-> Youtube: [[https://www.youtube.com/watch?v=QDDwwePbDtw&feature=emb_logo][Google I/O 2013 - Advanced Go Concurrency Patterns - YouTube]]
-> Original Slides: [[https://talks.golang.org/2013/advconc.slide#1][Advanced Go Concurrency Patterns]]
#+end_quote


* Example: ping-pong

#+BEGIN_SRC go :exports both :imports "fmt"
import "time"

type Ball struct{ hits int }

func main() {
	table := make(chan *Ball)
	go player("ping", table)
	go player("pong", table)

	table <- new(Ball) // game on; toss the ball
	time.Sleep(1 * time.Second)
	<-table // game over; grab the ball
}

func player(name string, table chan *Ball) {
	for {
		ball := <-table
		ball.hits++
		fmt.Println(name, ball.hits)
		time.Sleep(100 * time.Millisecond)
		table <- ball
	}
}
#+END_SRC

#+RESULTS:
#+begin_example
pong 1
ping 2
pong 3
ping 4
pong 5
ping 6
pong 7
ping 8
pong 9
ping 10
pong 11
#+end_example
